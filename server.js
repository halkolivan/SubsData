import fs from "fs";
import path from "path";
import cors from "cors";
import express from "express";
import fetch from "node-fetch";
import FormData from "form-data";
import { fileURLToPath } from "url";
import nodemailer from "nodemailer";

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ dist ---
const distPath = path.join(__dirname, "dist");
console.log("üóÇ Serving static from:", distPath);

// --- –†–∞–∑—Ä–µ—à–∞–µ–º JSON –¥–ª—è body ---
app.use(express.json());

// --- CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const FRONT_ORIGIN =
  process.env.FRONT_ORIGIN || "https://subsdata.onrender.com";
app.use(
  cors({
    origin: FRONT_ORIGIN,
    credentials: true, // —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∫—É–∫–∏ / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);

// --- –ü—Ä–∏–º–µ—Ä (–µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å—Ç–∞–≤–∏—Ç—å –∫—É–∫—É) ---
// res.cookie("sid", sessionId, {
//   httpOnly: true,
//   secure: true,
//   sameSite: "None",
// });

// --- Service Worker ---
app.get("/sw.js", (req, res) => {
  const swFile = path.join(distPath, "sw.js");
  res.setHeader("Content-Type", "application/javascript");
  if (fs.existsSync(swFile)) return res.sendFile(swFile);
  res.send(
    "// noop service worker\nself.addEventListener('install',()=>self.skipWaiting());\nself.addEventListener('activate',()=>self.clients.claim());\n"
  );
});

// --- –ò–∫–æ–Ω–∫–∏ ---
app.get(/^\/icons\/.*/, (req, res) => {
  const rel = req.path.replace(/^\//, "");
  const fileOnDisk = path.join(distPath, rel);
  if (fs.existsSync(fileOnDisk)) return res.sendFile(fileOnDisk);
  return res.status(404).send("Not found");
});

// --- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ---
app.get(/^\/locales\/.*/, (req, res) => {
  const rel = req.path.replace(/^\//, "");
  const fileOnDisk = path.join(distPath, rel);
  if (fs.existsSync(fileOnDisk)) return res.sendFile(fileOnDisk);
  return res.status(404).send("Not found");
});

// --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
app.get("/__assets", (req, res) => {
  try {
    const listDir = (p) => {
      const full = path.join(distPath, p);
      if (!fs.existsSync(full)) return null;
      return fs.readdirSync(full);
    };
    res.json({
      assets: listDir("assets"),
      icons: listDir("icons"),
      locales: listDir("locales"),
    });
  } catch (err) {
    console.error("Error listing dist folders", err);
    res.status(500).json({ error: "failed to list" });
  }
});

// --- GitHub –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
app.post("/auth/github", async (req, res) => {
  const { code } = req.body || {};
  if (!code) return res.status(400).json({ error: "missing_code" });

  const { GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET } = process.env;
  if (!GITHUB_CLIENT_ID || !GITHUB_CLIENT_SECRET)
    return res.status(500).json({ error: "missing_github_client_env" });

  try {
    // –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    const tokenResp = await fetch(
      "https://github.com/login/oauth/access_token",
      {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          client_id: GITHUB_CLIENT_ID,
          client_secret: GITHUB_CLIENT_SECRET,
          code,
        }),
      }
    );
    const tokenJson = await tokenResp.json();
    if (tokenJson.error)
      return res.status(500).json({
        error: tokenJson.error_description || tokenJson.error,
      });

    const access_token = tokenJson.access_token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResp = await fetch("https://api.github.com/user", {
      headers: {
        Authorization: `token ${access_token}`,
        Accept: "application/vnd.github.v3+json",
      },
    });
    const user = await userResp.json();

    res.json({ user, token: access_token });
  } catch (err) {
    console.error("GitHub exchange error", err);
    res.status(500).json({ error: "github_exchange_failed" });
  }
});

app.get("/get-subs", async (req, res) => {
  try {
    // 1. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    const token = authHeader.split(" ")[1];

    // 2. –ü–û–ò–°–ö –§–ê–ô–õ–ê (subscriptions.json)
    const searchUrl =
      'https://www.googleapis.com/drive/v3/files?q=name="subscriptions.json"&fields=files(id,name)&spaces=drive';
    const searchRes = await fetch(searchUrl, {
      method: "GET",
      headers: {
        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å
        Authorization: `Bearer ${token}`,
      },
    });

    // 3. –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–ê GOOGLE
    if (searchRes.status === 401 || searchRes.status === 403) {
      console.error(
        "‚ùå Google Drive API –≤–µ—Ä–Ω—É–ª 401/403. –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
      );
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 403)
      return res.status(403).json({
        error:
          "Google —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.",
      });
    }

    const searchData = await searchRes.json();
    const files = searchData.files;

    // 4. –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –§–ê–ô–õ–ê (–ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'files')
    if (!files || files.length === 0) {
      console.log("‚ö†Ô∏è –§–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫ subscriptions.json –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 404, –∫–æ—Ç–æ—Ä—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (AuthContext.jsx) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
      return res.status(404).json({ error: "–§–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    // 5. –ü–û–õ–£–ß–ï–ù–ò–ï ID –ü–ï–†–í–û–ì–û –§–ê–ô–õ–ê (–í—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'files')
    // –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.
    const fileId = files[0].id;

    // 6. –í–¢–û–†–û–ô –ó–ê–ü–†–û–°: –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fileId –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (alt=media)
    const downloadUrl = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`;

    const downloadRes = await fetch(downloadUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω!
      },
    });

    // 7. –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø
    if (!downloadRes.ok) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞:",
        downloadRes.statusText
      );
      return res
        .status(downloadRes.status)
        .json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫." });
    }

    // 8. –ü–ê–†–°–ò–ù–ì –ò –û–¢–ü–†–ê–í–ö–ê
    const subscriptionsText = await downloadRes.text(); // –ö–æ–Ω—Ç–µ–Ω—Ç ‚Äî —ç—Ç–æ JSON-—Å—Ç—Ä–æ–∫–∞
    const subscriptions = JSON.parse(subscriptionsText);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    res.status(200).json({ subscriptions: subscriptions });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:", err);
    res.status(500).json({ error: "failed_to_load" });
  }
});

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Google access_token ---
async function authMiddleware(req, res, next) {
  const auth = req.headers.authorization;
  if (!auth?.startsWith("Bearer ")) {
    return res.status(401).json({ error: "missing_token" });
  }

  const token = auth.split(" ")[1];

  try {
    const verifyRes = await fetch(
      `https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=${token}`,
      {
        headers: { "User-Agent": "SubsData-Server/1.0" },
      }
    );

    // Google –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –Ω–µ 200
    if (!verifyRes.ok) {
      const errText = await verifyRes.text();
      console.error("Google token verify failed:", errText);
      return res.status(401).json({ error: "invalid_token" });
    }

    const data = await verifyRes.json();
    if (!data.email) {
      console.error("Google token verify failed:", data);
      return res.status(401).json({ error: "invalid_token" });
    }

    req.user = { id: data.sub, email: data.email };
    req.token = token;
    next();
  } catch (err) {
    console.error("Google token verify error:", err);
    res.status(401).json({ error: "invalid_token" });
  }
}

// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Drive ---
app.post("/save-subs", authMiddleware, async (req, res) => {
  try {
    const { subscriptions } = req.body;
    const token = req.token;

    if (!Array.isArray(subscriptions))
      return res.status(400).json({ error: "no_subs_array" });

    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª
    const listRes = await fetch(
      "https://www.googleapis.com/drive/v3/files?q=name='subscriptions.json'&spaces=drive&fields=files(id,name,parents)",
      { headers: { Authorization: `Bearer ${token}` } }
    );
    const listData = await listRes.json();
    const fileExists = listData.files?.length > 0;
    const fileId = fileExists ? listData.files[0].id : null;

    let uploadData;

    if (fileExists) {
      // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –±–µ–∑ –ø–æ–ª—è "parents"
      const updateRes = await fetch(
        `https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=media`,
        {
          method: "PATCH",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(subscriptions, null, 2),
        }
      );

      uploadData = await updateRes.json();
      console.log("üíæ –û–±–Ω–æ–≤–ª—ë–Ω subscriptions.json", uploadData);
    } else {
      // üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª (—Å parents)
      const metadata = {
        name: "subscriptions.json",
        mimeType: "application/json",
        parents: ["root"],
      };

      const form = new FormData();

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é JSON-—Å—Ç—Ä–æ–∫—É
      form.append("metadata", JSON.stringify(metadata), {
        contentType: "application/json",
      });
      form.append("file", JSON.stringify(subscriptions, null, 2), {
        contentType: "application/json",
      });

      const createRes = await fetch(
        "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
        {
          method: "POST",
          headers: { Authorization: `Bearer ${token}` },
          body: form,
        }
      );

      uploadData = await createRes.json();
      console.log("üíæ –°–æ–∑–¥–∞–Ω subscriptions.json", uploadData);
    }

    res.json({
      ok: true,
      action: fileExists ? "updated" : "created",
      fileId: uploadData.id,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", err);
    res.status(500).json({ error: "drive_upload_failed" });
  }
});

// --- Nodemailer Setup ---
const transporter = nodemailer.createTransport({
  host: process.env.MAIL_HOST,
  port: 2525,
  secure: false,
  auth: {
    user: process.env.MAIL_USER,
    pass: process.env.MAIL_PASS,
  },
  timeout: 20000,
  connectionTimeout: 20000,
  socketTimeout: 20000,
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è . –ü–û–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–∏—Å–µ–º –Ω–µ –≤ —Å–ø–∞–º.
const mailOptions = {
  from: `${process.env.MAIL_SENDER_NAME} <${process.env.MAIL_USER}>`,
  to: userEmail,
  subject: "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ SubsData",

  // ‚úÖ –î–û–ë–ê–í–¨–¢–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò
  headers: {
    "X-Mailer": "SubsData Node.js App", // –ü–æ–º–æ–≥–∞–µ—Ç –ø–æ—á—Ç–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
  },

  // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (text)
  text: bodyText, // –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç

  // ‚úÖ –î–û–ë–ê–í–¨–¢–ï HTML-–í–ï–†–°–ò–Æ –î–õ–Ø –õ–£–ß–®–ï–ô –î–û–°–¢–ê–í–õ–Ø–ï–ú–û–°–¢–ò
  html: `
        <div style="font-family: Arial, sans-serif; line-height: 1.6;">
            <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</h2>
            <p>–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:</p>
            <ul>
                ${subscriptions
                  .map(
                    (sub) => `
                    <li>
                        <strong>${sub.name}</strong> &mdash; ${sub.price} ${sub.currency} 
                        (${sub.status}), –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${sub.category}, 
                        —Å–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: ${sub.nextPayment}
                    </li>
                `
                  )
                  .join("")}
            </ul>
            <br>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ SubsData.</p>
            <hr>
            <p style="font-size: 0.8em; color: #777;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>
        </div>
    `,
};

// --- –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (–î–û–ë–ê–í–õ–ï–ù–û) ---
app.post("/api/send-subs-email", authMiddleware, async (req, res) => {
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
  const { subscriptions, userEmail } = req.body;

  if (!subscriptions || !userEmail) {
    return res
      .status(400)
      .json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è." });
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
  const emailBody = subscriptions
    .map(
      (sub, i) =>
        `${i + 1}. ${sub.name} ‚Äî ${sub.price} ${sub.currency || ""} (${
          sub.status
        }), –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${sub.category}, —Å–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: ${sub.nextPayment}`
    )
    .join("\n");

  const mailOptions = {
    // –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ò–º—è "Web Service SubsData" –∏ –≤–∞—à –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    from: `"Web Service SubsData" <${process.env.FROM_EMAIL}>`,
    // –ü–û–õ–£–ß–ê–¢–ï–õ–¨: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    to: userEmail,
    subject: `–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ SubsData`,
    text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n${emailBody}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ SubsData.`,
  };

  try {
    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: "–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Nodemailer (SendGrid):", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä." });
  }
});
app.options("/api/send-subs-email", cors());

// --- –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç Google Drive ---
// app.get("/debug-drive", authMiddleware, async (req, res) => {
//   const token = req.token;
//   try {
//     const listRes = await fetch(
//       "https://www.googleapis.com/drive/v3/files?q=name='subscriptions.json'&spaces=drive&fields=files(id,name,parents)",
//       { headers: { Authorization: `Bearer ${token}` } }
//     );
//     const listData = await listRes.text(); // —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—ë
//     console.log("üîç –û—Ç–≤–µ—Ç Google Drive /files:", listData);
//     res.send(listData);
//   } catch (err) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ /debug-drive:", err);
//     res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Drive");
//   }
// });

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Google Drive ---
// app.get("/api/mysubscriptions", async (req, res) => {
//   const auth = req.headers.authorization;
//   if (!auth) return res.status(401).json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });
//   const token = auth.split(" ")[1];

//   try {
//     // 1Ô∏è‚É£ –ò—â–µ–º —Ñ–∞–π–ª –≤ My Drive
//     const listRes = await fetch(
//       "https://www.googleapis.com/drive/v3/files?q=name='subscriptions.json'&spaces=drive&fields=files(id,name,parents)",
//       { headers: { Authorization: `Bearer ${token}` } }
//     );

//     const listData = await listRes.json();
//     if (!listData.files || listData.files.length === 0) {
//       console.log("‚ö†Ô∏è –§–∞–π–ª subscriptions.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
//       return res.json({ subscriptions: [] });
//     }

//     const fileId = listData.files[0].id;

//     // 2Ô∏è‚É£ –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
//     const fileRes = await fetch(
//       `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,
//       { headers: { Authorization: `Bearer ${token}` } }
//     );

//     if (!fileRes.ok) {
//       console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", await fileRes.text());
//       return res.json({ subscriptions: [] });
//     }

//     const content = await fileRes.text();
//     const parsed = JSON.parse(content || "[]");
//     console.log("üì• –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ Drive:", parsed.length, "–ø–æ–¥–ø–∏—Å–æ–∫");

//     res.json({ subscriptions: parsed });
//   } catch (err) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:", err);
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫" });
//   }
// });

// --- –õ–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞—Å—Å–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏) ---
app.use((req, res, next) => {
  const urlPath = req.path || req.url || "";
  const staticExt = /\.(js|css|png|jpg|jpeg|svg|webmanifest|ico|json)$/i;

  // –µ—Å–ª–∏ –ø—É—Ç—å –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Ç–∞—Ç–∏–∫-—Ñ–∞–π–ª, –Ω–æ –µ–≥–æ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  if (
    staticExt.test(urlPath) ||
    urlPath.startsWith("/assets/") ||
    urlPath.startsWith("/icons/")
  ) {
    const fileOnDisk = path.join(distPath, urlPath.replace(/^\//, ""));
    if (!fs.existsSync(fileOnDisk)) {
      console.warn(`‚ö†Ô∏è 404 static asset not found: ${req.method} ${req.url}`);
    }
  }
  next();
});

// --- –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ ---
app.use(express.static(distPath, { index: false }));

// --- Google site verification ---
app.get("/googlea37d48efab48b1a5.html", (req, res) => {
  res.sendFile(path.join(__dirname, "dist", "googlea37d48efab48b1a5.html"));
});

app.get("*", (req, res) => {
  res.sendFile(path.join(distPath, "index.html"));
});

// --- –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–æ–ª—å–∫–æ "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö" –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –æ—Ç–¥–∞—á–∞ index.html ---
// ‚ö†Ô∏è –í Express 5 –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "*" ‚Äî —Ç–æ–ª—å–∫–æ /.* —Ä–µ–≥—É–ª—è—Ä–∫—É

app.get(/.*/, (req, res) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ API
  if (req.path.startsWith("/api") || req.path.startsWith("/auth")) {
    return res.status(404).json({ error: "API route not found" });
  }

  const indexFile = path.join(distPath, "index.html");
  res.sendFile(indexFile);
});

// --- –ó–∞–ø—É—Å–∫ ---
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üöÄ Server running on ${PORT}`));

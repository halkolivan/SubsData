import fs from "fs";
import path from "path";
import cors from "cors";
import express from "express";
import fetch from "node-fetch";
import FormData from "form-data";
import { fileURLToPath } from "url";
import { OAuth2Client } from "google-auth-library";

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ dist ---
const distPath = path.join(__dirname, "dist");
console.log("üóÇ Serving static from:", distPath);

// --- –†–∞–∑—Ä–µ—à–∞–µ–º JSON –¥–ª—è body ---
app.use(express.json());

// --- CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const FRONT_ORIGIN =
  process.env.FRONT_ORIGIN || "https://subsdata.onrender.com";
app.use(
  cors({
    origin: FRONT_ORIGIN,
    credentials: true, // —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∫—É–∫–∏ / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);

// --- –ü—Ä–∏–º–µ—Ä (–µ—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å—Ç–∞–≤–∏—Ç—å –∫—É–∫—É) ---
// res.cookie("sid", sessionId, {
//   httpOnly: true,
//   secure: true,
//   sameSite: "None",
// });

// --- Service Worker ---
app.get("/sw.js", (req, res) => {
  const swFile = path.join(distPath, "sw.js");
  res.setHeader("Content-Type", "application/javascript");
  if (fs.existsSync(swFile)) return res.sendFile(swFile);
  res.send(
    "// noop service worker\nself.addEventListener('install',()=>self.skipWaiting());\nself.addEventListener('activate',()=>self.clients.claim());\n"
  );
});

// --- –ò–∫–æ–Ω–∫–∏ ---
app.get(/^\/icons\/.*/, (req, res) => {
  const rel = req.path.replace(/^\//, "");
  const fileOnDisk = path.join(distPath, rel);
  if (fs.existsSync(fileOnDisk)) return res.sendFile(fileOnDisk);
  return res.status(404).send("Not found");
});

// --- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ ---
app.get(/^\/locales\/.*/, (req, res) => {
  const rel = req.path.replace(/^\//, "");
  const fileOnDisk = path.join(distPath, rel);
  if (fs.existsSync(fileOnDisk)) return res.sendFile(fileOnDisk);
  return res.status(404).send("Not found");
});

// --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ---
app.get("/__assets", (req, res) => {
  try {
    const listDir = (p) => {
      const full = path.join(distPath, p);
      if (!fs.existsSync(full)) return null;
      return fs.readdirSync(full);
    };
    res.json({
      assets: listDir("assets"),
      icons: listDir("icons"),
      locales: listDir("locales"),
    });
  } catch (err) {
    console.error("Error listing dist folders", err);
    res.status(500).json({ error: "failed to list" });
  }
});

// --- GitHub –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
app.post("/auth/github", async (req, res) => {
  const { code } = req.body || {};
  if (!code) return res.status(400).json({ error: "missing_code" });

  const { GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET } = process.env;
  if (!GITHUB_CLIENT_ID || !GITHUB_CLIENT_SECRET)
    return res.status(500).json({ error: "missing_github_client_env" });

  try {
    // –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    const tokenResp = await fetch(
      "https://github.com/login/oauth/access_token",
      {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          client_id: GITHUB_CLIENT_ID,
          client_secret: GITHUB_CLIENT_SECRET,
          code,
        }),
      }
    );
    const tokenJson = await tokenResp.json();
    if (tokenJson.error)
      return res.status(500).json({
        error: tokenJson.error_description || tokenJson.error,
      });

    const access_token = tokenJson.access_token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResp = await fetch("https://api.github.com/user", {
      headers: {
        Authorization: `token ${access_token}`,
        Accept: "application/vnd.github.v3+json",
      },
    });
    const user = await userResp.json();

    res.json({ user, token: access_token });
  } catch (err) {
    console.error("GitHub exchange error", err);
    res.status(500).json({ error: "github_exchange_failed" });
  }
});

app.get("/get-subs", async (req, res) => {
  try {
    const filePath = path.join(__dirname, "subscriptions.json");
    if (!fs.existsSync(filePath)) return res.json({ subscriptions: [] });
    const data = JSON.parse(fs.readFileSync(filePath, "utf8"));
    res.json({ subscriptions: data });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:", err);
    res.status(500).json({ error: "failed_to_load" });
  }
});

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Google —Ç–æ–∫–µ–Ω–∞ ---
async function authMiddleware(req, res, next) {
  const auth = req.headers.authorization;
  if (!auth?.startsWith("Bearer ")) {
    return res.status(401).json({ error: "missing_token" });
  }

  const token = auth.split(" ")[1];

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º access_token —á–µ—Ä–µ–∑ Google API
    const verifyRes = await fetch(
      `https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=${token}`
    );
    const data = await verifyRes.json();

    if (data.error_description || !data.email) {
      console.error("Google token verify failed:", data);
      return res.status(401).json({ error: "invalid_token" });
    }

    req.user = { id: data.sub, email: data.email };
    req.token = token;
    next();
  } catch (err) {
    console.error("Google token verify error:", err);
    res.status(401).json({ error: "invalid_token" });
  }
}


// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Drive ---
app.post("/save-subs", authMiddleware, async (req, res) => {
  try {
    const { subscriptions } = req.body;
    const token = req.token;

    if (!Array.isArray(subscriptions))
      return res.status(400).json({ error: "no_subs_array" });

    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª
    const listRes = await fetch(
      "https://www.googleapis.com/drive/v3/files?q=name='subscriptions.json'&spaces=drive&fields=files(id,name,parents)",
      { headers: { Authorization: `Bearer ${token}` } }
    );
    const listData = await listRes.json();
    const fileExists = listData.files?.length > 0;
    const fileId = fileExists ? listData.files[0].id : null;

    let uploadData;

    if (fileExists) {
      // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –±–µ–∑ –ø–æ–ª—è "parents"
      const updateRes = await fetch(
        `https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=media`,
        {
          method: "PATCH",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(subscriptions, null, 2),
        }
      );

      uploadData = await updateRes.json();
      console.log("üíæ –û–±–Ω–æ–≤–ª—ë–Ω subscriptions.json", uploadData);
    } else {
      // üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª (—Å parents)
      const metadata = {
        name: "subscriptions.json",
        mimeType: "application/json",
        parents: ["root"], // —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
      };

      const form = new FormData();
      form.append(
        "metadata",
        new Blob([JSON.stringify(metadata)], { type: "application/json" })
      );
      form.append(
        "file",
        new Blob([JSON.stringify(subscriptions, null, 2)], {
          type: "application/json",
        })
      );

      const createRes = await fetch(
        "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
        {
          method: "POST",
          headers: { Authorization: `Bearer ${token}` },
          body: form,
        }
      );

      uploadData = await createRes.json();
      console.log("üíæ –°–æ–∑–¥–∞–Ω subscriptions.json", uploadData);
    }

    res.json({
      ok: true,
      action: fileExists ? "updated" : "created",
      fileId: uploadData.id,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", err);
    res.status(500).json({ error: "drive_upload_failed" });
  }
});

// --- API prefix guard ---
app.use("/api", (req, res) => {
  res.status(404).json({ error: "API route not found" });
});

// --- –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç Google Drive ---
app.get("/debug-drive", authMiddleware, async (req, res) => {
  const token = req.token;
  try {
    const listRes = await fetch(
      "https://www.googleapis.com/drive/v3/files?q=name='subscriptions.json'&spaces=drive&fields=files(id,name,parents)",
      { headers: { Authorization: `Bearer ${token}` } }
    );
    const listData = await listRes.text(); // —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å—ë
    console.log("üîç –û—Ç–≤–µ—Ç Google Drive /files:", listData);
    res.send(listData);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ /debug-drive:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Drive");
  }
});

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Google Drive ---
app.get("/api/mysubscriptions", async (req, res) => {
  const auth = req.headers.authorization;
  if (!auth) return res.status(401).json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });
  const token = auth.split(" ")[1];

  try {
    // 1Ô∏è‚É£ –ò—â–µ–º —Ñ–∞–π–ª –≤ My Drive
    const listRes = await fetch(
      "https://www.googleapis.com/drive/v3/files?q=name='subscriptions.json'&spaces=drive&fields=files(id,name,parents)",
      { headers: { Authorization: `Bearer ${token}` } }
    );

    const listData = await listRes.json();
    if (!listData.files || listData.files.length === 0) {
      console.log("‚ö†Ô∏è –§–∞–π–ª subscriptions.json –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return res.json({ subscriptions: [] });
    }

    const fileId = listData.files[0].id;

    // 2Ô∏è‚É£ –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const fileRes = await fetch(
      `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`,
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (!fileRes.ok) {
      console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", await fileRes.text());
      return res.json({ subscriptions: [] });
    }

    const content = await fileRes.text();
    const parsed = JSON.parse(content || "[]");
    console.log("üì• –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–∑ Drive:", parsed.length, "–ø–æ–¥–ø–∏—Å–æ–∫");

    res.json({ subscriptions: parsed });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫" });
  }
});

// --- –õ–æ–≥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∞—Å—Å–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏) ---
app.use((req, res, next) => {
  const urlPath = req.path || req.url || "";
  const staticExt = /\.(js|css|png|jpg|jpeg|svg|webmanifest|ico|json)$/i;

  // –µ—Å–ª–∏ –ø—É—Ç—å –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Ç–∞—Ç–∏–∫-—Ñ–∞–π–ª, –Ω–æ –µ–≥–æ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
  if (
    staticExt.test(urlPath) ||
    urlPath.startsWith("/assets/") ||
    urlPath.startsWith("/icons/")
  ) {
    const fileOnDisk = path.join(distPath, urlPath.replace(/^\//, ""));
    if (!fs.existsSync(fileOnDisk)) {
      console.warn(`‚ö†Ô∏è 404 static asset not found: ${req.method} ${req.url}`);
    }
  }
  next();
});

// --- SPA fallback (React Router) ---
// --- –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ ---
app.use(express.static(distPath));

// --- –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç–æ–ª—å–∫–æ "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö" –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –æ—Ç–¥–∞—á–∞ index.html ---
// ‚ö†Ô∏è –í Express 5 –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "*" ‚Äî —Ç–æ–ª—å–∫–æ /.* —Ä–µ–≥—É–ª—è—Ä–∫—É

app.get(/.*/, (req, res) => {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ API
  if (req.path.startsWith("/api") || req.path.startsWith("/auth")) {
    return res.status(404).json({ error: "API route not found" });
  }

  const indexFile = path.join(distPath, "index.html");
  res.sendFile(indexFile);
});

// --- –ó–∞–ø—É—Å–∫ ---
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üöÄ Server running on ${PORT}`));



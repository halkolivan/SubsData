// imports
import cors from "cors";
import express from "express";
import fetch from "node-fetch";
import FormData from "form-data";
import nodemailer from "nodemailer";

const app = express();

// --- –†–∞–∑—Ä–µ—à–∞–µ–º JSON –¥–ª—è body ---
app.use(express.json());

// --- –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ ---
app.use(
  express.static(distPath, {
    index: false,
    setHeaders: (res, path) => {
      console.log("Serving:", path);
      if (
        path.endsWith(".html") ||
        path.endsWith(".js") ||
        path.endsWith(".css")
      ) {
        res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
        res.setHeader("Pragma", "no-cache");
        res.setHeader("Expires", "0");
      } else {
        // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–∫–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å
        res.setHeader("Cache-Control", "public, max-age=604800"); // 7 –¥–Ω–µ–π
      }
    },
  })
);

// --- CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
const FRONT_ORIGIN =
  process.env.FRONT_ORIGIN || "https://subsdata.onrender.com";
"http://localhost:5173", // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
  "https://subsdata-api.onrender.com", // –ò–Ω–æ–≥–¥–∞ API –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∞—Ç—å —Å–∞–º —Å–µ–±—è
  app.use(
    cors({
      origin: (origin, callback) => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ 'origin' (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ localhost)
        if (!origin) return callback(null, true);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ origin –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if (FRONT_ORIGIN.includes(origin)) {
          callback(null, true);
        } else {
          // –ï—Å–ª–∏ –¥–æ–º–µ–Ω –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          callback(new Error("Not allowed by CORS"));
        }
      },
      credentials: true, // —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∏ –∫—É–∫–∏ / –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
      allowedHeaders: ["Content-Type", "Authorization"],
    })
  );

// --- GitHub –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
app.post("/auth/github", async (req, res) => {
  const { code } = req.body || {};
  if (!code) return res.status(400).json({ error: "missing_code" });

  const { GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET } = process.env;
  if (!GITHUB_CLIENT_ID || !GITHUB_CLIENT_SECRET)
    return res.status(500).json({ error: "missing_github_client_env" });

  try {
    // –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    const tokenResp = await fetch(
      "https://github.com/login/oauth/access_token",
      {
        method: "POST",
        headers: {
          Accept: "application/json",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          client_id: GITHUB_CLIENT_ID,
          client_secret: GITHUB_CLIENT_SECRET,
          code,
        }),
      }
    );
    const tokenJson = await tokenResp.json();
    if (tokenJson.error)
      return res.status(500).json({
        error: tokenJson.error_description || tokenJson.error,
      });

    const access_token = tokenJson.access_token;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResp = await fetch("https://api.github.com/user", {
      headers: {
        Authorization: `token ${access_token}`,
        Accept: "application/vnd.github.v3+json",
      },
    });
    const user = await userResp.json();

    res.json({ user, token: access_token });
  } catch (err) {
    console.error("GitHub exchange error", err);
    res.status(500).json({ error: "github_exchange_failed" });
  }
});

app.get("/get-subs", async (req, res) => {
  try {
    // 1. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return res.status(401).json({ error: "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    const token = authHeader.split(" ")[1];

    // 2. –ü–û–ò–°–ö –§–ê–ô–õ–ê (subscriptions.json)
    const searchUrl =
      'https://www.googleapis.com/drive/v3/files?q=name="subscriptions.json"&fields=files(id,name)&spaces=drive';
    const searchRes = await fetch(searchUrl, {
      method: "GET",
      headers: {
        // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å
        Authorization: `Bearer ${token}`,
      },
    });

    // 3. –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–ê GOOGLE
    if (searchRes.status === 401 || searchRes.status === 403) {
      console.error(
        "‚ùå Google Drive API –≤–µ—Ä–Ω—É–ª 401/403. –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
      );
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 403)
      return res.status(403).json({
        error:
          "Google —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.",
      });
    }

    const searchData = await searchRes.json();
    const files = searchData.files;

    // 4. –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –§–ê–ô–õ–ê (–ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'files')
    if (!files || files.length === 0) {
      console.log("‚ö†Ô∏è –§–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫ subscriptions.json –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 404, –∫–æ—Ç–æ—Ä—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ (AuthContext.jsx) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
      return res.status(404).json({ error: "–§–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω." });
    }

    // 5. –ü–û–õ–£–ß–ï–ù–ò–ï ID –ü–ï–†–í–û–ì–û –§–ê–ô–õ–ê (–í—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'files')
    // –ú—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º.
    const fileId = files[0].id;

    // 6. –í–¢–û–†–û–ô –ó–ê–ü–†–û–°: –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º fileId –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (alt=media)
    const downloadUrl = `https://www.googleapis.com/drive/v3/files/${fileId}?alt=media`;

    const downloadRes = await fetch(downloadUrl, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω!
      },
    });

    // 7. –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø
    if (!downloadRes.ok) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞:",
        downloadRes.statusText
      );
      return res
        .status(downloadRes.status)
        .json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫." });
    }

    // 8. –ü–ê–†–°–ò–ù–ì –ò –û–¢–ü–†–ê–í–ö–ê
    const subscriptionsText = await downloadRes.text(); // –ö–æ–Ω—Ç–µ–Ω—Ç ‚Äî —ç—Ç–æ JSON-—Å—Ç—Ä–æ–∫–∞
    const subscriptions = JSON.parse(subscriptionsText);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    res.status(200).json({ subscriptions: subscriptions });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:", err);
    res.status(500).json({ error: "failed_to_load" });
  }
});

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Google access_token ---
async function authMiddleware(req, res, next) {
  const auth = req.headers.authorization;
  if (!auth?.startsWith("Bearer ")) {
    return res.status(401).json({ error: "missing_token" });
  }

  const token = auth.split(" ")[1];

  try {
    const verifyRes = await fetch(
      `https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=${token}`,
      {
        headers: { "User-Agent": "SubsData-Server/1.0" },
      }
    );

    // Google –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –Ω–µ 200
    if (!verifyRes.ok) {
      const errText = await verifyRes.text();
      console.error("Google token verify failed:", errText);
      return res.status(401).json({ error: "invalid_token" });
    }

    const data = await verifyRes.json();
    if (!data.email) {
      console.error("Google token verify failed:", data);
      return res.status(401).json({ error: "invalid_token" });
    }

    req.user = { id: data.sub, email: data.email };
    req.token = token;
    next();
  } catch (err) {
    console.error("Google token verify error:", err);
    res.status(401).json({ error: "invalid_token" });
  }
}

// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google Drive ---
app.post("/save-subs", authMiddleware, async (req, res) => {
  try {
    const { subscriptions } = req.body;
    const token = req.token;

    if (!Array.isArray(subscriptions))
      return res.status(400).json({ error: "no_subs_array" });

    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª
    const listRes = await fetch(
      "https://www.googleapis.com/drive/v3/files?q=name='subscriptions.json'&spaces=drive&fields=files(id,name,parents)",
      { headers: { Authorization: `Bearer ${token}` } }
    );
    const listData = await listRes.json();
    const fileExists = listData.files?.length > 0;
    const fileId = fileExists ? listData.files[0].id : null;

    let uploadData;

    if (fileExists) {
      // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –±–µ–∑ –ø–æ–ª—è "parents"
      const updateRes = await fetch(
        `https://www.googleapis.com/upload/drive/v3/files/${fileId}?uploadType=media`,
        {
          method: "PATCH",
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify(subscriptions, null, 2),
        }
      );

      uploadData = await updateRes.json();
      console.log("üíæ –û–±–Ω–æ–≤–ª—ë–Ω subscriptions.json", uploadData);
    } else {
      // üÜï –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª (—Å parents)
      const metadata = {
        name: "subscriptions.json",
        mimeType: "application/json",
        parents: ["root"],
      };

      const form = new FormData();

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é JSON-—Å—Ç—Ä–æ–∫—É
      form.append("metadata", JSON.stringify(metadata), {
        contentType: "application/json",
      });
      form.append("file", JSON.stringify(subscriptions, null, 2), {
        contentType: "application/json",
      });

      const createRes = await fetch(
        "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
        {
          method: "POST",
          headers: { Authorization: `Bearer ${token}` },
          body: form,
        }
      );

      uploadData = await createRes.json();
      console.log("üíæ –°–æ–∑–¥–∞–Ω subscriptions.json", uploadData);
    }

    res.json({
      ok: true,
      action: fileExists ? "updated" : "created",
      fileId: uploadData.id,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", err);
    res.status(500).json({ error: "drive_upload_failed" });
  }
});

// --- Nodemailer Setup ---
const transporter = nodemailer.createTransport({
  host: process.env.MAIL_HOST,
  port: 2525,
  secure: false,
  auth: {
    user: process.env.MAIL_USER,
    pass: process.env.MAIL_PASS,
  },
  timeout: 20000,
  connectionTimeout: 20000,
  socketTimeout: 20000,
});

// --- –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º (–î–û–ë–ê–í–õ–ï–ù–û) ---
app.post("/api/send-subs-email", authMiddleware, async (req, res) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
  const { subscriptions, userEmail } = req.body;

  if (!subscriptions || !userEmail) {
    return res
      .status(400)
      .json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–ª–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è." });
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
  const emailBody = subscriptions
    .map(
      (sub, i) =>
        `${i + 1}. ${sub.name} ‚Äî ${sub.price} ${sub.currency || ""} (${
          sub.status
        }), –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${sub.category}, —Å–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: ${sub.nextPayment}`
    )
    .join("\n");

  const mailOptions = {
    // –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨: –ò–º—è "Web Service SubsData" –∏ –≤–∞—à –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    from: `"Web Service SubsData" <${process.env.FROM_EMAIL}>`,
    // –ü–û–õ–£–ß–ê–¢–ï–õ–¨: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    to: userEmail,
    subject: `–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ SubsData`,
    text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n${emailBody}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ SubsData.`,
  };

  try {
    await transporter.sendMail(mailOptions);
    res.status(200).json({ message: "–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Nodemailer (SendGrid):", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä." });
  }
});

export default app;

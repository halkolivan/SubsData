import {
  useState,
  useEffect,
  useCallback,
  useRef, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω useRef –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Google Token Client
  // createContext, // –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
  // useContext,    // –ò—Å–∫–ª—é—á–µ–Ω–æ, –ø–æ—Å–∫–æ–ª—å–∫—É useAuth —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞
} from "react";
import { notifySubscriptions } from "@/hooks/useNotifyDataSub";
// ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AuthContext –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏
import { AuthContext } from "./auth-context-export.js";

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ENV ---
const GOOGLE_CLIENT_ID = import.meta.env.VITE_GOOGLE_CLIENT_ID;
const API_URL = import.meta.env.VITE_API_URL;

// --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ ---
const loadSubscriptions = async (token, setSubscriptions) => {
  if (!token || !API_URL) return;

  try {
    const res = await fetch(`${API_URL}/get-subs`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    const data = await res.json();

    if (res.ok && data.subscriptions && Array.isArray(data.subscriptions)) {
      console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å Google Drive");
      setSubscriptions(data.subscriptions);
      localStorage.setItem(
        "userSubscriptions",
        JSON.stringify(data.subscriptions)
      );
    } else if (res.status === 404 || res.status === 403) {
      console.log(
        "‚ö†Ô∏è –§–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞."
      );
      setSubscriptions([]);
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:", data.error);
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ fetch –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:", err);
  }
};

export const AuthProvider = ({ children }) => {
  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
  const [user, setUser] = useState(() => {
    const saved = localStorage.getItem("user");
    return saved ? JSON.parse(saved) : null;
  });

  const [token, setToken] = useState(
    () => localStorage.getItem("authToken") || null
  );

  const [subscriptions, setSubscriptions] = useState(() => {
    const saved = localStorage.getItem("userSubscriptions");
    return localStorage.getItem("authToken") && saved ? JSON.parse(saved) : [];
  });

  const [settings, setSettings] = useState(() => {
    const saved = localStorage.getItem("userSettings");
    return saved ? JSON.parse(saved) : { currency: { main: "USD" } };
  });

  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [justLoggedIn, setJustLoggedIn] = useState(false);

  // ‚úÖ Ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ç–æ–∫–µ–Ω-–∫–ª–∏–µ–Ω—Ç–∞ Google
  const tokenClientRef = useRef(null);

  // --- Login / Logout ---
  const login = (userData, authToken) => {
    setUser(userData);
    setToken(authToken);
    localStorage.setItem("user", JSON.stringify(userData));
    localStorage.setItem("authToken", authToken);
    setIsAuthModalOpen(false);
    setJustLoggedIn(true);

    loadSubscriptions(authToken, setSubscriptions);
  };

  const logout = () => {
    setUser(null);
    setToken(null);
    setSubscriptions([]);
    localStorage.removeItem("user");
    localStorage.removeItem("authToken");
    localStorage.removeItem("userSubscriptions");
    // –û—Ç–∑—ã–≤ —Ç–æ–∫–µ–Ω–∞ Google
    if (tokenClientRef.current && window.google?.accounts?.oauth2?.revoke) {
      window.google.accounts.oauth2.revoke(token, () =>
        console.log("Google —Ç–æ–∫–µ–Ω –æ—Ç–æ–∑–≤–∞–Ω.")
      );
    }
  };

  // --- Add Subscription ---
  const addSubscription = useCallback(
    (newSub) => {
      const subToAdd = {
        ...newSub,
        id: Date.now(),
        currency: newSub.currency || "USD",
        nextPayment:
          newSub.nextPayment || new Date().toISOString().split("T")[0],
      };

      try {
        const updated = [...subscriptions, subToAdd];
        localStorage.setItem("userSubscriptions", JSON.stringify(updated));
        setSubscriptions(updated);
        console.log("üÜï –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:", subToAdd);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", err);
      }
    },
    [subscriptions]
  );

  // --- Save State to Drive ---
  const saveStateToDrive = useCallback(
    async (currentSubs) => {
      if (!token || !API_URL) {
        console.warn("‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ API_URL.");
        return;
      }

      const payload = { subscriptions: currentSubs };

      try {
        const res = await fetch(`${API_URL}/save-subs`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(payload),
        });

        if (res.ok) {
          console.log("üíæ ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Drive.");
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Drive:", await res.json());
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ fetch –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Drive:", err);
      }
    },
    [token, API_URL]
  );

  // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token (–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞) ---
  useEffect(() => {
    // –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.
    if (!window.google?.accounts?.oauth2 || !GOOGLE_CLIENT_ID) return;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ Ref
    tokenClientRef.current = window.google.accounts.oauth2.initTokenClient({
      client_id: GOOGLE_CLIENT_ID,
      scope: "https://www.googleapis.com/auth/drive.file email profile",
      callback: (resp) => {
        if (resp?.access_token) {
          console.log("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω Google access_token (–ê–≤—Ç–æ)");
          setToken(resp.access_token);
          localStorage.setItem("authToken", resp.access_token);
        }
      },
    });

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 50 –º–∏–Ω—É—Ç)
    const interval = setInterval(() => {
      if (tokenClientRef.current) {
        tokenClientRef.current.requestAccessToken({ prompt: "" });
      }
    }, 50 * 60 * 1000);

    return () => clearInterval(interval);
  }, []);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–û–ö–ï–ù–ê
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ null.
  const refreshAccessToken = useCallback(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É "Google Token Client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
    if (!tokenClientRef.current) {
      console.error("Google Token Client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
      return Promise.resolve(null); // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥
    }

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤ –≤ Promise –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å await
    return new Promise((resolve) => {
      tokenClientRef.current.requestAccessToken({
        prompt: "",
        callback: (resp) => {
          if (resp?.access_token) {
            console.log("üîÑ –û–±–Ω–æ–≤–ª—ë–Ω Google access_token (–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)");
            setToken(resp.access_token);
            localStorage.setItem("authToken", resp.access_token);
            resolve(resp.access_token); // –í–û–ó–í–†–ê–©–ê–ï–ú –ù–û–í–´–ô –¢–û–ö–ï–ù
          } else {
            console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:", resp);
            resolve(null); // –†–∞–∑—Ä–µ—à–∞–µ–º —Å null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          }
        },
      });
    });
  }, [setToken]);

  // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
  const updateSettings = (patch) => {
    setSettings((prev) => {
      const newSettings = {
        ...prev,
        ...patch,
        notif: { ...(prev.notif || {}), ...(patch.notif || {}) },
        currency: { ...(prev.currency || {}), ...(patch.currency || {}) },
      };
      // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ù–û–í–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ localStorage
      localStorage.setItem("userSettings", JSON.stringify(newSettings));
      return newSettings;
    });
  };

  // --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ ---
  useEffect(() => {
    if (justLoggedIn) {
      notifySubscriptions(subscriptions);
      setJustLoggedIn(false);
    }
  }, [justLoggedIn, subscriptions]);

  // --- –í–æ–∑–≤—Ä–∞—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---
  return (
    <AuthContext.Provider
      value={{
        user,
        token,
        login,
        logout,
        isAuthModalOpen,
        setIsAuthModalOpen,
        isAddModalOpen,
        setIsAddModalOpen,
        addSubscription,
        subscriptions,
        setSubscriptions,
        settings,
        updateSettings,
        saveStateToDrive,
        refreshAccessToken, // ‚úÖ –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ –§–£–ù–ö–¶–ò–Æ
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};
